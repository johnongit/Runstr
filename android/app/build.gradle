apply plugin: 'com.android.application'

// Load keystore properties
def keystorePropertiesFile = file('../keystore.properties') // Path relative to this build script (app/build.gradle)
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.runstr.runs"
    compileSdk rootProject.ext.compileSdkVersion

    // Define signing configurations
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['storeFile']) // Path relative to the 'android' dir now
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            } else {
                // Fallback or error handling if keystore.properties is missing for a release build
                println '*****************************************************************************'
                println 'ERROR: keystore.properties not found for release build.'
                println 'Release build will not be signed.'
                println '*****************************************************************************'
                // You might want to throw an exception here in a real CI/CD environment
                // throw new GradleException("keystore.properties not found for release build.")
            }
        }
    }

    defaultConfig {
        applicationId "com.runstr.runs"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        // Read version code and name from gradle.properties
        def propsFile = rootProject.file('gradle.properties')
        def runstrProps = new Properties()
        if (propsFile.exists()) {
            runstrProps.load(new FileInputStream(propsFile))
        }
        versionCode runstrProps['runstrVersionCode'] ? runstrProps['runstrVersionCode'].toInteger() : 1
        // Prioritize -PappVersionName from command line, fallback to gradle.properties, then to default
        versionName project.hasProperty('appVersionName') ? project.property('appVersionName') : (runstrProps['runstrVersionName'] ?: "0.0.0-dev")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    buildTypes {
        release {
            // Apply the signing configuration to the release build type
            // signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
